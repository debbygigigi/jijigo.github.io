<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Debby&#39;s Playground</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://debbyji.com/"/>
  <updated>2018-12-19T15:07:47.000Z</updated>
  <id>http://debbyji.com/</id>
  
  <author>
    <name>Debby ji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vuex two ways data binding</title>
    <link href="http://debbyji.com/vuex-two-ways-data-binding/"/>
    <id>http://debbyji.com/vuex-two-ways-data-binding/</id>
    <published>2018-12-19T15:05:59.000Z</published>
    <updated>2018-12-19T15:07:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>我們都知道vue很大的特性就是可以做到 <a href="https://vuejs.org/v2/guide/forms.html" target="_blank" rel="noopener">two-way data binding</a> ，並且很簡單，只要透過 <code>v-model</code> 綁定 data的值即可，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>除了form元件（input, textarea, and select）之外，<a href="https://vuejs.org/v2/guide/components.html#Using-v-model-on-Components" target="_blank" rel="noopener">custom component</a> 也可以做到。</p><p>不過 Vuex 也想做到 <code>two-way data binding</code> 該怎麼做呢</p><h2 id="原來的做法"><a href="#原來的做法" class="headerlink" title="原來的做法"></a>原來的做法</h2><p>假設目前有一個 component 和一個 vuex ，component 會需要從 vuex 取值也會賦值，也就是想要實現 <code>two-way data binding</code></p><p>簡單的 vuex 範例，state 裡存放 filters 的狀態，透過 actions 跟 mutations 去呼叫並改變 state 值，如果會 vuex 的話應該看得懂</p><p><em>Store.js</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    filters: &#123;</span><br><span class="line">        type: <span class="string">'rent'</span>,</span><br><span class="line">        regions: [<span class="string">'七堵區'</span>],</span><br><span class="line">        keyword: <span class="string">'123'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    setFilter(&#123;state, commit&#125;, filter) &#123;</span><br><span class="line">        commit(<span class="string">'SET_FILTER'</span>, filter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    SET_FILTER: <span class="function">(<span class="params">state, filters</span>) =&gt;</span> &#123;</span><br><span class="line">        _.forEach(filters, (value, key) =&gt; &#123;</span><br><span class="line">            state.filters[key] = value;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>這邊是精簡後的 component</p><p><em>vue component</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;select v-model=<span class="string">"regions"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    data() &#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            regions: []</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    computed: &#123;</span></span><br><span class="line"><span class="regexp">        ...mapState(&#123;</span></span><br><span class="line"><span class="regexp">            regionsState: state =&gt; state.filters.regions</span></span><br><span class="line"><span class="regexp">        &#125;),</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    watch: &#123;</span></span><br><span class="line"><span class="regexp">        regions(value) &#123;</span></span><br><span class="line"><span class="regexp">            this.setFilter(&#123;'regions': value&#125;);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    created() &#123;</span></span><br><span class="line"><span class="regexp">        this.regions = this.regionsState;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">        ...mapActions(['setFilter']),</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>來解釋一下，在這個component中，引入了另一個 custom component: select，並跟 data 綁了 v-model<br>由於要實現雙向綁定，分別從vuex取值及賦值</p><p>取值：先從 <code>mapState</code> 取值，並在 <code>created</code> 階段時將值給了 data，於是select component便得到初始值<br>賦值：利用 <code>watch</code> 監聽 data 值，只要值有變動，就執行 <code>mapActions</code> 去更動vuex的state</p><h2 id="調整"><a href="#調整" class="headerlink" title="調整"></a>調整</h2><p>經過調整後，程式碼如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;select v-model=<span class="string">"regions"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ data() &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/     return &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/         regions: []</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/     &#125;;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &#125;,</span></span><br><span class="line"><span class="regexp">    computed: &#123;</span></span><br><span class="line"><span class="regexp">        ...mapState(&#123;</span></span><br><span class="line"><span class="regexp">            regionsState: state =&gt; state.Search.filters.regions</span></span><br><span class="line"><span class="regexp">        &#125;),</span></span><br><span class="line"><span class="regexp">        regions: &#123;</span></span><br><span class="line"><span class="regexp">            get() &#123;</span></span><br><span class="line"><span class="regexp">                return this.regionsState;</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            set(value) &#123;</span></span><br><span class="line"><span class="regexp">                this.setFilter(&#123;'regions': value&#125;);</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ watch: &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/     regions(value) &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/         this.setFilter(&#123;'regions': value&#125;);</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/     &#125;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ created() &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/     this.regions = this.regionsState;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">        ...mapActions('Search', ['setFilter']),</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>一樣是 v-model綁值，只是綁的值改在computed，利用 computed 的 set與get特性來做取值與賦值</p><p>取值：從 computed 的 <code>get</code> 取得 <code>mapState</code><br>賦值：computed 的值若有變動，在 <code>set</code> 去執行 <code>mapActions</code></p><p>這樣就可以少了 data, watch, created 這些程式碼，利用 computed 去做這些事</p><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>在會用 vuex 後，其實都是用第一種作法，或是剛好都沒用到 <code>v-model</code><br>最近在用的時候靈機一想並上網搜尋後，才發現有這樣好用的做法，並且官方 <a href="https://vuex.vuejs.org/guide/forms.html" target="_blank" rel="noopener">Vuex - Form Handling</a> 其實也有提到</p><p>看來真的沒事就要看看官方文件 :smile:</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://markus.oberlehner.net/blog/form-fields-two-way-data-binding-and-vuex/" target="_blank" rel="noopener">Form Fields, Two-Way Data Binding and Vuex</a></li><li><a href="https://itnext.io/anyway-this-is-how-to-use-v-model-with-vuex-computed-setter-in-action-320eb682c976" target="_blank" rel="noopener">Anyway, this is how to use v-model with Vuex. Computed setter in action.</a></li><li><a href="https://vuex.vuejs.org/guide/forms.html" target="_blank" rel="noopener">Vuex - Form Handling</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我們都知道vue很大的特性就是可以做到 &lt;a href=&quot;https://vuejs.org/v2/guide/forms.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;two-way data binding&lt;/a&gt; ，並且很簡單，只要透過 &lt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://debbyji.com/tags/Vue/"/>
    
      <category term="Vuex" scheme="http://debbyji.com/tags/Vuex/"/>
    
      <category term="DataBinding" scheme="http://debbyji.com/tags/DataBinding/"/>
    
  </entry>
  
  <entry>
    <title>vue + socket.io = chatroom</title>
    <link href="http://debbyji.com/vue-chart-room-with-socketio/"/>
    <id>http://debbyji.com/vue-chart-room-with-socketio/</id>
    <published>2018-08-29T13:29:43.000Z</published>
    <updated>2018-08-29T13:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/fnWR7hx.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為看了吳大師的 <a href="https://www.youtube.com/watch?v=QVZcMx3jtG8" target="_blank" rel="noopener">[週四寫程式系列] 來用socket.io做個即時互動的遊戲吧！</a> Youtube直播，對這個主題很有興趣很想來挑戰<br>本來想說應該不會太難，老師直播才用了一小時，那我兩小時應該可以吧～<br>結果雖然頁面做得很快，但想要deploy到heroku上debug就花了將近一個禮拜的晚上（哭）</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>使用 <a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="noopener">vue-cli</a> 的template建立新專案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack-simple vue-chatroom</span><br></pre></td></tr></table></figure><p>安裝套件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express socket.io --save</span><br></pre></td></tr></table></figure><h3 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h3><p>首先在專案的根目錄下建一個跑後端的檔案 <code>server.js</code><br>這個server.js主要要建立 <code>socket server</code>，並幫我們導向靜態頁面</p><p><em>server.js</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> socketIO = <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> serveStatic = <span class="built_in">require</span>(<span class="string">'serve-static'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立http server </span></span><br><span class="line"><span class="keyword">const</span> server = express()</span><br><span class="line">  .use(<span class="string">"/"</span>, serveStatic(path.join(__dirname, <span class="string">'/dist'</span>)))</span><br><span class="line">  .listen(PORT, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Listening on <span class="subst">$&#123; PORT &#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立socket server </span></span><br><span class="line"><span class="keyword">const</span> io = socketIO(server);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理socket連線事件</span></span><br><span class="line">io.on(<span class="string">'connection'</span>, (socket) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Client connected'</span>);</span><br><span class="line">  socket.on(<span class="string">'disconnect'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Client disconnected'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>因為我的 <code>index.html</code>位置在<code>/dist</code>下，透過 <code>serveStatic</code> 這個套件幫我導向</p><h3 id="client端"><a href="#client端" class="headerlink" title="client端"></a>client端</h3><p>安裝套件 <a href="https://github.com/socketio/socket.io-client" target="_blank" rel="noopener">socket.io-client</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i socket.io-client</span><br></pre></td></tr></table></figure></p><p><em>app.vue</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">"socket.io-client"</span>;</span><br><span class="line"><span class="keyword">var</span> socket = io();</span><br></pre></td></tr></table></figure></p><p>如果你的socket server跟client是分開的<br><code>io()</code> 括號內可以填入socket server的網址<br>如果沒填就是預設連到目前的網址</p><h3 id="測試連線"><a href="#測試連線" class="headerlink" title="測試連線"></a>測試連線</h3><p>server端跟client端的基本設置就完成了<br>現在只要開啟server就能知道有無連線成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>如果terminal有出現 <code>Client connected</code> 就是連線成功！</p><h3 id="測試接收訊息"><a href="#測試接收訊息" class="headerlink" title="測試接收訊息"></a>測試接收訊息</h3><p>在client端連線後，<code>emit</code>訊息到server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var socket = io();</span><br><span class="line">socket.emit(&quot;message&quot;, &quot;hello world.&quot;);</span><br></pre></td></tr></table></figure><p>server端用<code>on</code>接收，後面接callback function<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">io.on(&apos;connection&apos;, function (socket) &#123;</span><br><span class="line">    console.log(&apos;a user connected.&apos;);</span><br><span class="line"></span><br><span class="line">    socket.on(&apos;message&apos;, (msg) =&gt; &#123;</span><br><span class="line">        console.log(&apos;user says: &apos; + msg);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>terminal出現訊息就代表server接收成功！</p><h2 id="實作功能"><a href="#實作功能" class="headerlink" title="實作功能"></a>實作功能</h2><h3 id="顯示訊息"><a href="#顯示訊息" class="headerlink" title="顯示訊息"></a>顯示訊息</h3><p>首先建立 <code>messages</code> 陣列來儲存訊息<br>假設一開始已經有一筆訊息，在一開始連線時就要讓client收到這個歷史訊息</p><p>server端 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建一個儲存歷史訊息的變數，只要server開著，變數內容就會一直存在</span></span><br><span class="line"><span class="keyword">const</span> messages = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'Majar'</span>, <span class="attr">message</span>: <span class="string">'Good Night.'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a user connected.'</span>);</span><br><span class="line">    <span class="comment">// 廣播 歷史訊息</span></span><br><span class="line">    socket.emit(<span class="string">'syncMessages'</span>, messages);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>client端</p><p>先建立簡單的list畫面</p><p><em>App.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;聊起來&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;msg in messages&quot;&gt;</span><br><span class="line">        &#123;&#123; msg.name &#125;&#125;: </span><br><span class="line">        &#123;&#123; msg.message &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>收到 <code>syncMessages</code> 事件，把訊息資料傳到data去render</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      messages: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">    socket.on(<span class="string">"syncMessages"</span>, messages =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.messages = messages;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="client留言"><a href="#client留言" class="headerlink" title="client留言"></a>client留言</h3><p>接下來就是要讓使用者可以留言</p><p>client端<br>寫個簡單的input和button</p><p><em>App.vue</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input ref=&quot;name&quot; type=&quot;text&quot; placeholder=&quot;name&quot; value=&quot;路人&quot;&gt;</span><br><span class="line">&lt;input ref=&quot;message&quot; type=&quot;text&quot; placeholder=&quot;message&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;addMessage&quot;&gt;留言&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>按下新增留言按鈕時，emit <code>newMessage</code> 事件，並帶上資料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    addMessage() &#123;</span><br><span class="line">      socket.emit(<span class="string">"newMessage"</span>, &#123;</span><br><span class="line">        name: <span class="keyword">this</span>.$refs.name.value,</span><br><span class="line">        message: <span class="keyword">this</span>.$refs.message.value</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.$refs.name.value = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">this</span>.$refs.message.value = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server端</p><p>當收到client的訊息時，push至message陣列後<br>並再次廣播到client，確認每個client都有更新到最新訊息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收新訊息</span></span><br><span class="line">socket.on(<span class="string">'newMessage'</span>, (msg) =&gt; &#123;</span><br><span class="line">    <span class="comment">// console.log(msg.name + ' says: ' + msg.message);</span></span><br><span class="line">    messages.push(msg);</span><br><span class="line">    socket.emit(<span class="string">'syncMessages'</span>, messages);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上基本的的功能就完成了</p><h2 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h2><p>在deploy的過程中一直遇到問題而且卡關卡很久<br>最困難的是，還是不知道問題出在哪</p><p><img src="https://i.imgur.com/XsPp7Wp.png" alt=""></p><p><img src="https://i.imgur.com/V2xxWis.png" alt=""></p><p>第一個error讓我以為ㄧ定要有HTTPS，害我還去申請 <a href="https://www.openssl.org/" target="_blank" rel="noopener">openSSL</a> 而且還看不是很懂…<br>後來看到官方的這篇 <a href="https://devcenter.heroku.com/articles/node-websockets" target="_blank" rel="noopener">Using WebSockets on Heroku with Node.js</a>，我就跟著它做然後就成功了</p><p>原來是因為在看吳老師的影片時，以為ㄧ定要有 <code>socket server</code> 和 <code>api server</code>，而且我把前端路由做在<code>api server</code>上，所以一直出錯<br>後來跟著官方教學用一個<code>socket server</code>並把前端路由做在這邊就可以了<br>我覺得也是因為我對後端的觀念比較不熟才會一直卡關，甚至連google都沒用，因為不知道實際的問題到底在哪<br>早知道有官方教學就能少走好多天的冤枉路啊</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>本來想說先做簡單的功能，deploy上線之後在慢慢增加功能、調整版面<br>真的沒想到deploy花了好多時間（哭）</p><p>來小小的寫一下features，希望之後有時間可以完成更多功能！</p><ul><li style="list-style: none"><input type="checkbox"> firebase儲存訊息</li><li style="list-style: none"><input type="checkbox"> 有人輸入中</li><li style="list-style: none"><input type="checkbox"> 有幾個人在線上</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/fnWR7hx.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;因為看了吳大師的 &lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World test</title>
    <link href="http://debbyji.com/hello-world/"/>
    <id>http://debbyji.com/hello-world/</id>
    <published>2018-08-29T11:57:03.000Z</published>
    <updated>2018-08-29T13:05:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
